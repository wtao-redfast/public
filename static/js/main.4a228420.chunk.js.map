{"version":3,"sources":["model/WeatherApi.js","viewModel/WeatherViewModel.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","WeatherApi","cityName","fetch","encodeURIComponent","response","json","cities","length","woeid","toString","WeatherContext","createContext","WeatherProvider","props","useState","weathers","setWeathers","useEffect","a","items","getCurrentTemperature","cityWeather","city","temperature","consolidated_weather","the_temp","loadData","Provider","value","children","App","useContext","className","version","map","weather","index","Paper","key","style","width","marginTop","Typography","variant","component","data-testid","Math","round","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wWAAMA,EAAU,kEAIKC,E,4JACkBC,G,yFACVC,MACjBH,EANW,+BAMgBI,mBAAmBF,I,cAD9CG,E,gBAGeA,EAASC,O,aAAxBC,E,QACOC,OAAS,G,iCACCL,MACbH,EAVI,iBAUoBO,EAAO,GAAGE,MAAMC,Y,cAD5CL,E,iBAGaA,EAASC,O,0EAEnB,I,0GCZFK,EAAiBC,0BAGjBC,EAAkB,SAACC,GAAW,IAAD,EACNC,mBAAS,IADH,mBAC/BC,EAD+B,KACrBC,EADqB,KAyBtC,OAtBAC,qBAAU,WACN,IAAMX,EAAS,CAAC,WAAY,SAAU,kBACxB,uCAAG,oCAAAY,EAAA,sDACTC,EAAQ,GADC,cAEUb,GAFV,gEAEFL,EAFE,iBAGeD,EAAWoB,sBAC/BnB,GAJK,OAGLoB,EAHK,OAMTF,EAAK,CACD,CACIG,KAAMrB,EACNsB,YACIF,EAAYG,qBAAqB,GAAGC,WAJ3C,mBAMEN,IAZE,+IAebH,EAAYG,GAfC,gEAAH,qDAiBdO,KACD,IAGC,kBAAChB,EAAeiB,SAAhB,CAAyBC,MAAOb,GAC3BF,EAAMgB,W,wBCFJC,MAxBf,WACI,IAAMf,EAAWgB,qBAAWrB,GAC5B,OACI,yBAAKsB,UAAU,OACX,sCAAYC,KACZ,4BAAQD,UAAU,cACbjB,EAASmB,KAAI,SAACC,EAASC,GAAV,OACV,kBAACC,EAAA,EAAD,CACIC,IAAKF,EACLG,MAAO,CAAEC,MAAO,QAASC,UAAW,SAEpC,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAC9BT,EAAQb,MAEb,kBAACoB,EAAA,EAAD,CAAYE,UAAU,IAAIC,cAAY,eACjCC,KAAKC,MAAMZ,EAAQZ,aAAad,WAAa,iBCXtDuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4a228420.chunk.js","sourcesContent":["const baseUrl = \"https://cors-anywhere.herokuapp.com/https://www.metaweather.com\";\nconst locationSearch = \"/api/location/search/?query=\";\nconst cityWeather = \"/api/location/\";\n\nexport default class WeatherApi {\n    static async getCurrentTemperature(cityName) {\n        let response = await fetch(\n            baseUrl + locationSearch + encodeURIComponent(cityName)\n        );\n        let cities = await response.json();\n        if (cities.length > 0) {\n            response = await fetch(\n                baseUrl + cityWeather + cities[0].woeid.toString()\n            );\n            return await response.json();\n        }\n        return {};\n    }\n}\n","import React, { useState, createContext, useEffect } from \"react\";\nimport WeatherApi from \"../model/WeatherApi\";\n\n// Create Context Object\nexport const WeatherContext = createContext();\n\n// Create a provider for components to consume and subscribe to changes\nexport const WeatherProvider = (props) => {\n    const [weathers, setWeathers] = useState([]);\n\n    useEffect(() => {\n        const cities = [\"Shanghai\", \"London\", \"San Francisco\"];\n        const loadData = async () => {\n            let items = [];\n            for (const cityName of cities) {\n                let cityWeather = await WeatherApi.getCurrentTemperature(\n                    cityName\n                );\n                items = [\n                    {\n                        city: cityName,\n                        temperature:\n                            cityWeather.consolidated_weather[0].the_temp,\n                    },\n                    ...items,\n                ];\n            }\n            setWeathers(items);\n        };\n        loadData();\n    }, []);\n\n    return (\n        <WeatherContext.Provider value={weathers}>\n            {props.children}\n        </WeatherContext.Provider>\n    );\n};\n","import React, { useContext } from \"react\";\nimport \"./App.css\";\nimport { WeatherContext } from \"./viewModel/WeatherViewModel\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {version} from '../package.json';\n\n// more UI widgets demo from https://v3.material-ui.com/\nfunction App() {\n    const weathers = useContext(WeatherContext);\n    return (\n        <div className=\"App\">\n            <p>version {version}</p>\n            <header className=\"App-header\">\n                {weathers.map((weather, index) => (\n                    <Paper\n                        key={index}\n                        style={{ width: \"500px\", marginTop: \"50px\" }}\n                    >\n                        <Typography variant=\"h5\" component=\"h3\">\n                            {weather.city}\n                        </Typography>\n                        <Typography component=\"p\" data-testid=\"temperature\">\n                            {Math.round(weather.temperature).toString() + \"â„ƒ\"}\n                        </Typography>\n                    </Paper>\n                ))}\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { WeatherProvider } from \"./viewModel/WeatherViewModel\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <WeatherProvider>\n      <App />\n    </WeatherProvider> \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}